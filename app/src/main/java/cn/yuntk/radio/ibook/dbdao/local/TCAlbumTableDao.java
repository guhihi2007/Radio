package cn.yuntk.radio.ibook.dbdao.local;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.yuntk.radio.ibook.bean.TCAlbumTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tc_album_list".
*/
public class TCAlbumTableDao extends AbstractDao<TCAlbumTable, Long> {

    public static final String TABLENAME = "tc_album_list";

    /**
     * Properties of entity TCAlbumTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BookID = new Property(0, Long.class, "bookID", true, "_id");
        public final static Property BookName = new Property(1, String.class, "bookName", false, "BOOK_NAME");
        public final static Property BookPhoto = new Property(2, String.class, "bookPhoto", false, "BOOK_PHOTO");
        public final static Property HostName = new Property(3, String.class, "hostName", false, "HOST_NAME");
        public final static Property Intro = new Property(4, String.class, "intro", false, "INTRO");
        public final static Property PlayNum = new Property(5, int.class, "playNum", false, "PLAY_NUM");
        public final static Property Is_collect = new Property(6, String.class, "is_collect", false, "IS_COLLECT");
        public final static Property Is_history = new Property(7, String.class, "is_history", false, "IS_HISTORY");
        public final static Property Remark1 = new Property(8, String.class, "remark1", false, "REMARK1");
        public final static Property Remark2 = new Property(9, String.class, "remark2", false, "REMARK2");
    }

    private DaoSession daoSession;


    public TCAlbumTableDao(DaoConfig config) {
        super(config);
    }
    
    public TCAlbumTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tc_album_list\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: bookID
                "\"BOOK_NAME\" TEXT," + // 1: bookName
                "\"BOOK_PHOTO\" TEXT," + // 2: bookPhoto
                "\"HOST_NAME\" TEXT," + // 3: hostName
                "\"INTRO\" TEXT," + // 4: intro
                "\"PLAY_NUM\" INTEGER NOT NULL ," + // 5: playNum
                "\"IS_COLLECT\" TEXT," + // 6: is_collect
                "\"IS_HISTORY\" TEXT," + // 7: is_history
                "\"REMARK1\" TEXT," + // 8: remark1
                "\"REMARK2\" TEXT);"); // 9: remark2
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tc_album_list\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TCAlbumTable entity) {
        stmt.clearBindings();
 
        Long bookID = entity.getBookID();
        if (bookID != null) {
            stmt.bindLong(1, bookID);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(2, bookName);
        }
 
        String bookPhoto = entity.getBookPhoto();
        if (bookPhoto != null) {
            stmt.bindString(3, bookPhoto);
        }
 
        String hostName = entity.getHostName();
        if (hostName != null) {
            stmt.bindString(4, hostName);
        }
 
        String intro = entity.getIntro();
        if (intro != null) {
            stmt.bindString(5, intro);
        }
        stmt.bindLong(6, entity.getPlayNum());
 
        String is_collect = entity.getIs_collect();
        if (is_collect != null) {
            stmt.bindString(7, is_collect);
        }
 
        String is_history = entity.getIs_history();
        if (is_history != null) {
            stmt.bindString(8, is_history);
        }
 
        String remark1 = entity.getRemark1();
        if (remark1 != null) {
            stmt.bindString(9, remark1);
        }
 
        String remark2 = entity.getRemark2();
        if (remark2 != null) {
            stmt.bindString(10, remark2);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TCAlbumTable entity) {
        stmt.clearBindings();
 
        Long bookID = entity.getBookID();
        if (bookID != null) {
            stmt.bindLong(1, bookID);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(2, bookName);
        }
 
        String bookPhoto = entity.getBookPhoto();
        if (bookPhoto != null) {
            stmt.bindString(3, bookPhoto);
        }
 
        String hostName = entity.getHostName();
        if (hostName != null) {
            stmt.bindString(4, hostName);
        }
 
        String intro = entity.getIntro();
        if (intro != null) {
            stmt.bindString(5, intro);
        }
        stmt.bindLong(6, entity.getPlayNum());
 
        String is_collect = entity.getIs_collect();
        if (is_collect != null) {
            stmt.bindString(7, is_collect);
        }
 
        String is_history = entity.getIs_history();
        if (is_history != null) {
            stmt.bindString(8, is_history);
        }
 
        String remark1 = entity.getRemark1();
        if (remark1 != null) {
            stmt.bindString(9, remark1);
        }
 
        String remark2 = entity.getRemark2();
        if (remark2 != null) {
            stmt.bindString(10, remark2);
        }
    }

    @Override
    protected final void attachEntity(TCAlbumTable entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TCAlbumTable readEntity(Cursor cursor, int offset) {
        TCAlbumTable entity = new TCAlbumTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // bookID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookPhoto
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // hostName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // intro
            cursor.getInt(offset + 5), // playNum
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // is_collect
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // is_history
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // remark1
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // remark2
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TCAlbumTable entity, int offset) {
        entity.setBookID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookPhoto(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHostName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIntro(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPlayNum(cursor.getInt(offset + 5));
        entity.setIs_collect(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIs_history(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRemark1(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRemark2(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TCAlbumTable entity, long rowId) {
        entity.setBookID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TCAlbumTable entity) {
        if(entity != null) {
            return entity.getBookID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TCAlbumTable entity) {
        return entity.getBookID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
