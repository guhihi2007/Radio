package cn.yuntk.radio.ibook.dbdao.local;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.yuntk.radio.ibook.bean.Music;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SystemMessage".
*/
public class MusicDao extends AbstractDao<Music, Long> {

    public static final String TABLENAME = "SystemMessage";

    /**
     * Properties of entity Music.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property SongId = new Property(1, long.class, "songId", false, "songId");
        public final static Property Type = new Property(2, int.class, "type", false, "type");
        public final static Property Title = new Property(3, String.class, "title", false, "title");
        public final static Property Artist = new Property(4, String.class, "artist", false, "artist");
        public final static Property Album = new Property(5, String.class, "album", false, "album");
        public final static Property AlbumId = new Property(6, long.class, "albumId", false, "albumId");
        public final static Property CoverPath = new Property(7, String.class, "coverPath", false, "coverPath");
        public final static Property Duration = new Property(8, long.class, "duration", false, "duration");
        public final static Property FileName = new Property(9, String.class, "fileName", false, "fileName");
        public final static Property FileSize = new Property(10, long.class, "fileSize", false, "fileSize");
        public final static Property Path = new Property(11, String.class, "path", false, "path");
        public final static Property Book_con = new Property(12, String.class, "book_con", false, "book_con");
        public final static Property Zj_title = new Property(13, String.class, "zj_title", false, "zj_title");
        public final static Property Zj_id = new Property(14, int.class, "zj_id", false, "zj_id");
        public final static Property Mark_1 = new Property(15, String.class, "mark_1", false, "mark_1");
        public final static Property Mark_2 = new Property(16, String.class, "mark_2", false, "mark_2");
        public final static Property Is_collect = new Property(17, String.class, "is_collect", false, "is_collect");
        public final static Property Is_history = new Property(18, String.class, "is_history", false, "is_history");
    }


    public MusicDao(DaoConfig config) {
        super(config);
    }
    
    public MusicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SystemMessage\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"songId\" INTEGER NOT NULL ," + // 1: songId
                "\"type\" INTEGER NOT NULL ," + // 2: type
                "\"title\" TEXT," + // 3: title
                "\"artist\" TEXT," + // 4: artist
                "\"album\" TEXT," + // 5: album
                "\"albumId\" INTEGER NOT NULL ," + // 6: albumId
                "\"coverPath\" TEXT," + // 7: coverPath
                "\"duration\" INTEGER NOT NULL ," + // 8: duration
                "\"fileName\" TEXT," + // 9: fileName
                "\"fileSize\" INTEGER NOT NULL ," + // 10: fileSize
                "\"path\" TEXT," + // 11: path
                "\"book_con\" TEXT," + // 12: book_con
                "\"zj_title\" TEXT," + // 13: zj_title
                "\"zj_id\" INTEGER NOT NULL ," + // 14: zj_id
                "\"mark_1\" TEXT," + // 15: mark_1
                "\"mark_2\" TEXT," + // 16: mark_2
                "\"is_collect\" TEXT," + // 17: is_collect
                "\"is_history\" TEXT);"); // 18: is_history
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SystemMessage\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Music entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSongId());
        stmt.bindLong(3, entity.getType());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(5, artist);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(6, album);
        }
        stmt.bindLong(7, entity.getAlbumId());
 
        String coverPath = entity.getCoverPath();
        if (coverPath != null) {
            stmt.bindString(8, coverPath);
        }
        stmt.bindLong(9, entity.getDuration());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(10, fileName);
        }
        stmt.bindLong(11, entity.getFileSize());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(12, path);
        }
 
        String book_con = entity.getBook_con();
        if (book_con != null) {
            stmt.bindString(13, book_con);
        }
 
        String zj_title = entity.getZj_title();
        if (zj_title != null) {
            stmt.bindString(14, zj_title);
        }
        stmt.bindLong(15, entity.getZj_id());
 
        String mark_1 = entity.getMark_1();
        if (mark_1 != null) {
            stmt.bindString(16, mark_1);
        }
 
        String mark_2 = entity.getMark_2();
        if (mark_2 != null) {
            stmt.bindString(17, mark_2);
        }
 
        String is_collect = entity.getIs_collect();
        if (is_collect != null) {
            stmt.bindString(18, is_collect);
        }
 
        String is_history = entity.getIs_history();
        if (is_history != null) {
            stmt.bindString(19, is_history);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Music entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSongId());
        stmt.bindLong(3, entity.getType());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(5, artist);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(6, album);
        }
        stmt.bindLong(7, entity.getAlbumId());
 
        String coverPath = entity.getCoverPath();
        if (coverPath != null) {
            stmt.bindString(8, coverPath);
        }
        stmt.bindLong(9, entity.getDuration());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(10, fileName);
        }
        stmt.bindLong(11, entity.getFileSize());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(12, path);
        }
 
        String book_con = entity.getBook_con();
        if (book_con != null) {
            stmt.bindString(13, book_con);
        }
 
        String zj_title = entity.getZj_title();
        if (zj_title != null) {
            stmt.bindString(14, zj_title);
        }
        stmt.bindLong(15, entity.getZj_id());
 
        String mark_1 = entity.getMark_1();
        if (mark_1 != null) {
            stmt.bindString(16, mark_1);
        }
 
        String mark_2 = entity.getMark_2();
        if (mark_2 != null) {
            stmt.bindString(17, mark_2);
        }
 
        String is_collect = entity.getIs_collect();
        if (is_collect != null) {
            stmt.bindString(18, is_collect);
        }
 
        String is_history = entity.getIs_history();
        if (is_history != null) {
            stmt.bindString(19, is_history);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Music readEntity(Cursor cursor, int offset) {
        Music entity = new Music( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // songId
            cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // artist
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // album
            cursor.getLong(offset + 6), // albumId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // coverPath
            cursor.getLong(offset + 8), // duration
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fileName
            cursor.getLong(offset + 10), // fileSize
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // path
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // book_con
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // zj_title
            cursor.getInt(offset + 14), // zj_id
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // mark_1
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // mark_2
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // is_collect
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // is_history
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Music entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSongId(cursor.getLong(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setArtist(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAlbum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAlbumId(cursor.getLong(offset + 6));
        entity.setCoverPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDuration(cursor.getLong(offset + 8));
        entity.setFileName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFileSize(cursor.getLong(offset + 10));
        entity.setPath(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBook_con(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setZj_title(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setZj_id(cursor.getInt(offset + 14));
        entity.setMark_1(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMark_2(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIs_collect(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIs_history(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Music entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Music entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Music entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
