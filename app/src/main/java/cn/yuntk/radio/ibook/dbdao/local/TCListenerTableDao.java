package cn.yuntk.radio.ibook.dbdao.local;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import cn.yuntk.radio.ibook.bean.TCListenerTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tc_album_track_list".
*/
public class TCListenerTableDao extends AbstractDao<TCListenerTable, Long> {

    public static final String TABLENAME = "tc_album_track_list";

    /**
     * Properties of entity TCListenerTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Localid = new Property(0, Long.class, "localid", true, "_id");
        public final static Property BookID = new Property(1, Long.class, "bookID", false, "BOOK_ID");
        public final static Property Bookname = new Property(2, String.class, "bookname", false, "BOOKNAME");
        public final static Property Epis = new Property(3, int.class, "epis", false, "EPIS");
        public final static Property Zname = new Property(4, String.class, "zname", false, "ZNAME");
        public final static Property Is_download = new Property(5, String.class, "is_download", false, "IS_DOWNLOAD");
        public final static Property Path = new Property(6, String.class, "path", false, "PATH");
        public final static Property Online = new Property(7, String.class, "online", false, "ONLINE");
        public final static Property ListenerStatus = new Property(8, int.class, "listenerStatus", false, "LISTENER_STATUS");
        public final static Property Duration = new Property(9, int.class, "duration", false, "DURATION");
        public final static Property Progress = new Property(10, int.class, "progress", false, "PROGRESS");
        public final static Property DisplayProgress = new Property(11, String.class, "displayProgress", false, "DISPLAY_PROGRESS");
        public final static Property Is_collect = new Property(12, String.class, "is_collect", false, "IS_COLLECT");
        public final static Property Is_history = new Property(13, String.class, "is_history", false, "IS_HISTORY");
        public final static Property Is_local = new Property(14, String.class, "is_local", false, "IS_LOCAL");
        public final static Property Remark1 = new Property(15, String.class, "remark1", false, "REMARK1");
        public final static Property Remark2 = new Property(16, String.class, "remark2", false, "REMARK2");
    }

    private Query<TCListenerTable> tCAlbumTable_MusicsQuery;

    public TCListenerTableDao(DaoConfig config) {
        super(config);
    }
    
    public TCListenerTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tc_album_track_list\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: localid
                "\"BOOK_ID\" INTEGER," + // 1: bookID
                "\"BOOKNAME\" TEXT," + // 2: bookname
                "\"EPIS\" INTEGER NOT NULL ," + // 3: epis
                "\"ZNAME\" TEXT," + // 4: zname
                "\"IS_DOWNLOAD\" TEXT," + // 5: is_download
                "\"PATH\" TEXT," + // 6: path
                "\"ONLINE\" TEXT," + // 7: online
                "\"LISTENER_STATUS\" INTEGER NOT NULL ," + // 8: listenerStatus
                "\"DURATION\" INTEGER NOT NULL ," + // 9: duration
                "\"PROGRESS\" INTEGER NOT NULL ," + // 10: progress
                "\"DISPLAY_PROGRESS\" TEXT," + // 11: displayProgress
                "\"IS_COLLECT\" TEXT," + // 12: is_collect
                "\"IS_HISTORY\" TEXT," + // 13: is_history
                "\"IS_LOCAL\" TEXT," + // 14: is_local
                "\"REMARK1\" TEXT," + // 15: remark1
                "\"REMARK2\" TEXT);"); // 16: remark2
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tc_album_track_list\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TCListenerTable entity) {
        stmt.clearBindings();
 
        Long localid = entity.getLocalid();
        if (localid != null) {
            stmt.bindLong(1, localid);
        }
 
        Long bookID = entity.getBookID();
        if (bookID != null) {
            stmt.bindLong(2, bookID);
        }
 
        String bookname = entity.getBookname();
        if (bookname != null) {
            stmt.bindString(3, bookname);
        }
        stmt.bindLong(4, entity.getEpis());
 
        String zname = entity.getZname();
        if (zname != null) {
            stmt.bindString(5, zname);
        }
 
        String is_download = entity.getIs_download();
        if (is_download != null) {
            stmt.bindString(6, is_download);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(7, path);
        }
 
        String online = entity.getOnline();
        if (online != null) {
            stmt.bindString(8, online);
        }
        stmt.bindLong(9, entity.getListenerStatus());
        stmt.bindLong(10, entity.getDuration());
        stmt.bindLong(11, entity.getProgress());
 
        String displayProgress = entity.getDisplayProgress();
        if (displayProgress != null) {
            stmt.bindString(12, displayProgress);
        }
 
        String is_collect = entity.getIs_collect();
        if (is_collect != null) {
            stmt.bindString(13, is_collect);
        }
 
        String is_history = entity.getIs_history();
        if (is_history != null) {
            stmt.bindString(14, is_history);
        }
 
        String is_local = entity.getIs_local();
        if (is_local != null) {
            stmt.bindString(15, is_local);
        }
 
        String remark1 = entity.getRemark1();
        if (remark1 != null) {
            stmt.bindString(16, remark1);
        }
 
        String remark2 = entity.getRemark2();
        if (remark2 != null) {
            stmt.bindString(17, remark2);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TCListenerTable entity) {
        stmt.clearBindings();
 
        Long localid = entity.getLocalid();
        if (localid != null) {
            stmt.bindLong(1, localid);
        }
 
        Long bookID = entity.getBookID();
        if (bookID != null) {
            stmt.bindLong(2, bookID);
        }
 
        String bookname = entity.getBookname();
        if (bookname != null) {
            stmt.bindString(3, bookname);
        }
        stmt.bindLong(4, entity.getEpis());
 
        String zname = entity.getZname();
        if (zname != null) {
            stmt.bindString(5, zname);
        }
 
        String is_download = entity.getIs_download();
        if (is_download != null) {
            stmt.bindString(6, is_download);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(7, path);
        }
 
        String online = entity.getOnline();
        if (online != null) {
            stmt.bindString(8, online);
        }
        stmt.bindLong(9, entity.getListenerStatus());
        stmt.bindLong(10, entity.getDuration());
        stmt.bindLong(11, entity.getProgress());
 
        String displayProgress = entity.getDisplayProgress();
        if (displayProgress != null) {
            stmt.bindString(12, displayProgress);
        }
 
        String is_collect = entity.getIs_collect();
        if (is_collect != null) {
            stmt.bindString(13, is_collect);
        }
 
        String is_history = entity.getIs_history();
        if (is_history != null) {
            stmt.bindString(14, is_history);
        }
 
        String is_local = entity.getIs_local();
        if (is_local != null) {
            stmt.bindString(15, is_local);
        }
 
        String remark1 = entity.getRemark1();
        if (remark1 != null) {
            stmt.bindString(16, remark1);
        }
 
        String remark2 = entity.getRemark2();
        if (remark2 != null) {
            stmt.bindString(17, remark2);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TCListenerTable readEntity(Cursor cursor, int offset) {
        TCListenerTable entity = new TCListenerTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // localid
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // bookID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookname
            cursor.getInt(offset + 3), // epis
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // zname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // is_download
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // path
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // online
            cursor.getInt(offset + 8), // listenerStatus
            cursor.getInt(offset + 9), // duration
            cursor.getInt(offset + 10), // progress
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // displayProgress
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // is_collect
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // is_history
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // is_local
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // remark1
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // remark2
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TCListenerTable entity, int offset) {
        entity.setLocalid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setBookname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEpis(cursor.getInt(offset + 3));
        entity.setZname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIs_download(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOnline(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setListenerStatus(cursor.getInt(offset + 8));
        entity.setDuration(cursor.getInt(offset + 9));
        entity.setProgress(cursor.getInt(offset + 10));
        entity.setDisplayProgress(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIs_collect(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIs_history(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIs_local(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRemark1(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRemark2(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TCListenerTable entity, long rowId) {
        entity.setLocalid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TCListenerTable entity) {
        if(entity != null) {
            return entity.getLocalid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TCListenerTable entity) {
        return entity.getLocalid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "musics" to-many relationship of TCAlbumTable. */
    public List<TCListenerTable> _queryTCAlbumTable_Musics(Long bookID) {
        synchronized (this) {
            if (tCAlbumTable_MusicsQuery == null) {
                QueryBuilder<TCListenerTable> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BookID.eq(null));
                tCAlbumTable_MusicsQuery = queryBuilder.build();
            }
        }
        Query<TCListenerTable> query = tCAlbumTable_MusicsQuery.forCurrentThread();
        query.setParameter(0, bookID);
        return query.list();
    }

}
