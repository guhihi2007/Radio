package cn.yuntk.radio.ibook.dbdao.local;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.yuntk.radio.ibook.bean.TCLastListenerTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tc_album_last_one".
*/
public class TCLastListenerTableDao extends AbstractDao<TCLastListenerTable, Long> {

    public static final String TABLENAME = "tc_album_last_one";

    /**
     * Properties of entity TCLastListenerTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BookID = new Property(0, Long.class, "bookID", true, "_id");
        public final static Property BookName = new Property(1, String.class, "bookName", false, "BOOK_NAME");
        public final static Property Epis = new Property(2, int.class, "epis", false, "EPIS");
        public final static Property Zname = new Property(3, String.class, "zname", false, "ZNAME");
        public final static Property Is_download = new Property(4, String.class, "is_download", false, "IS_DOWNLOAD");
        public final static Property Path = new Property(5, String.class, "path", false, "PATH");
        public final static Property Online = new Property(6, String.class, "online", false, "ONLINE");
        public final static Property ListenerStatus = new Property(7, int.class, "listenerStatus", false, "LISTENER_STATUS");
        public final static Property Duration = new Property(8, int.class, "duration", false, "DURATION");
        public final static Property Progress = new Property(9, int.class, "progress", false, "PROGRESS");
    }


    public TCLastListenerTableDao(DaoConfig config) {
        super(config);
    }
    
    public TCLastListenerTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tc_album_last_one\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: bookID
                "\"BOOK_NAME\" TEXT," + // 1: bookName
                "\"EPIS\" INTEGER NOT NULL ," + // 2: epis
                "\"ZNAME\" TEXT," + // 3: zname
                "\"IS_DOWNLOAD\" TEXT," + // 4: is_download
                "\"PATH\" TEXT," + // 5: path
                "\"ONLINE\" TEXT," + // 6: online
                "\"LISTENER_STATUS\" INTEGER NOT NULL ," + // 7: listenerStatus
                "\"DURATION\" INTEGER NOT NULL ," + // 8: duration
                "\"PROGRESS\" INTEGER NOT NULL );"); // 9: progress
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tc_album_last_one\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TCLastListenerTable entity) {
        stmt.clearBindings();
 
        Long bookID = entity.getBookID();
        if (bookID != null) {
            stmt.bindLong(1, bookID);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(2, bookName);
        }
        stmt.bindLong(3, entity.getEpis());
 
        String zname = entity.getZname();
        if (zname != null) {
            stmt.bindString(4, zname);
        }
 
        String is_download = entity.getIs_download();
        if (is_download != null) {
            stmt.bindString(5, is_download);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
 
        String online = entity.getOnline();
        if (online != null) {
            stmt.bindString(7, online);
        }
        stmt.bindLong(8, entity.getListenerStatus());
        stmt.bindLong(9, entity.getDuration());
        stmt.bindLong(10, entity.getProgress());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TCLastListenerTable entity) {
        stmt.clearBindings();
 
        Long bookID = entity.getBookID();
        if (bookID != null) {
            stmt.bindLong(1, bookID);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(2, bookName);
        }
        stmt.bindLong(3, entity.getEpis());
 
        String zname = entity.getZname();
        if (zname != null) {
            stmt.bindString(4, zname);
        }
 
        String is_download = entity.getIs_download();
        if (is_download != null) {
            stmt.bindString(5, is_download);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
 
        String online = entity.getOnline();
        if (online != null) {
            stmt.bindString(7, online);
        }
        stmt.bindLong(8, entity.getListenerStatus());
        stmt.bindLong(9, entity.getDuration());
        stmt.bindLong(10, entity.getProgress());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TCLastListenerTable readEntity(Cursor cursor, int offset) {
        TCLastListenerTable entity = new TCLastListenerTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // bookID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookName
            cursor.getInt(offset + 2), // epis
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // zname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // is_download
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // path
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // online
            cursor.getInt(offset + 7), // listenerStatus
            cursor.getInt(offset + 8), // duration
            cursor.getInt(offset + 9) // progress
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TCLastListenerTable entity, int offset) {
        entity.setBookID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEpis(cursor.getInt(offset + 2));
        entity.setZname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIs_download(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOnline(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setListenerStatus(cursor.getInt(offset + 7));
        entity.setDuration(cursor.getInt(offset + 8));
        entity.setProgress(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TCLastListenerTable entity, long rowId) {
        entity.setBookID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TCLastListenerTable entity) {
        if(entity != null) {
            return entity.getBookID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TCLastListenerTable entity) {
        return entity.getBookID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
