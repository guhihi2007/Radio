package cn.yuntk.radio.ibook.dbdao.local;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.yuntk.radio.ibook.bean.ListenerBookInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "dao_listener_book".
*/
public class ListenerBookInfoDao extends AbstractDao<ListenerBookInfo, String> {

    public static final String TABLENAME = "dao_listener_book";

    /**
     * Properties of entity ListenerBookInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Con = new Property(3, String.class, "con", false, "CON");
        public final static Property Zztt = new Property(4, String.class, "zztt", false, "ZZTT");
        public final static Property Mark1 = new Property(5, String.class, "mark1", false, "MARK1");
    }

    private DaoSession daoSession;


    public ListenerBookInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ListenerBookInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"dao_listener_book\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"TYPE\" TEXT," + // 2: type
                "\"CON\" TEXT," + // 3: con
                "\"ZZTT\" TEXT," + // 4: zztt
                "\"MARK1\" TEXT);"); // 5: mark1
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"dao_listener_book\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ListenerBookInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String con = entity.getCon();
        if (con != null) {
            stmt.bindString(4, con);
        }
 
        String zztt = entity.getZztt();
        if (zztt != null) {
            stmt.bindString(5, zztt);
        }
 
        String mark1 = entity.getMark1();
        if (mark1 != null) {
            stmt.bindString(6, mark1);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ListenerBookInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String con = entity.getCon();
        if (con != null) {
            stmt.bindString(4, con);
        }
 
        String zztt = entity.getZztt();
        if (zztt != null) {
            stmt.bindString(5, zztt);
        }
 
        String mark1 = entity.getMark1();
        if (mark1 != null) {
            stmt.bindString(6, mark1);
        }
    }

    @Override
    protected final void attachEntity(ListenerBookInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ListenerBookInfo readEntity(Cursor cursor, int offset) {
        ListenerBookInfo entity = new ListenerBookInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // con
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // zztt
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // mark1
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ListenerBookInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setZztt(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMark1(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ListenerBookInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ListenerBookInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ListenerBookInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
