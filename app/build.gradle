apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
//apply from: 'and_res_guard.gradle'
apply plugin: 'org.greenrobot.greendao' //greendao 配置步骤二
apply plugin: 'walle' //配置步骤二


android {
    compileSdkVersion 27
    defaultConfig {
//        applicationId "cn.yuntk.radio"
        minSdkVersion 17
        targetSdkVersion 27
        versionCode VERSION_CODE as int
        versionName VERSION_NAME
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        //增加对Vector兼容性的支持
        vectorDrawables.useSupportLibrary = true
        //渠道统一维度
        flavorDimensions "versionCode"
        //生成buildTime字段
        resValue("string", "build_time", buildTime())
        multiDexEnabled true //分包需要
        //bugly统计需要
        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi' , 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }
    dataBinding {
        enabled = true
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }


    signingConfigs {
        release {
            storeFile file(KEY_STORE)
            storePassword KEY_STORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_ALIAS_PASSWORD

            v1SigningEnabled true
            v2SigningEnabled true
        }

        debug {
//            storeFile file(KEY_STORE)
//            storePassword KEY_STORE_PASSWORD
//            keyAlias KEY_ALIAS
//            keyPassword KEY_ALIAS_PASSWORD

            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            debuggable false  //可以debug
            minifyEnabled false //启用Proguard
//            shrinkResources false //是否清理无用资源,依赖于minifyEnabled
//            zipAlignEnabled true //是否启用zipAlign压缩
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.release
            debuggable true  //可以debug
            minifyEnabled false //启用Proguard
//            shrinkResources false //是否清理无用资源,依赖于minifyEnabled
//            zipAlignEnabled true //是否启用zipAlign压缩
        }
    }


    productFlavors {
//        _yuntk {}
//        _baidu {}
//        _360 {}
//        _xiaomi {}
//        _yingyongbao {}
//        _oppo {}
//        _huawei {}
//        _lenovo {}
//        _ziyong {}
//        _vivo {}
//        _meizu {}
//        _anzhi {}
//        productFlavors.all {
//            flavor -> flavor.manifestPlaceholders = [RADIO_CHANNEL_VALUE: name]
//        }
        Raido_360{
            //渠道
            buildConfigField "String", "APP_CHANNEL", '"_360"'
            buildConfigField "String", "umengKey", '"5b03e985a40fa34fb2000074"'
            buildConfigField "String", "buglyKey", '"65f523d8c4"'
            //广告
            buildConfigField "String", "GDT_APP_KEY", '"1106846041"'
            buildConfigField "String", "GDT_INSERT_ID", '"6020432461457403"'
            buildConfigField "String", "GDT_SPLASH_ID", '"6060933411456482"'
            buildConfigField "String", "GDT_BANNER_ID", '"9000235441352411"'
            buildConfigField "String", "GDT_NATIVE_AD", '"1010230471553430"'

            buildConfigField "String", "AD_GOOGLE_APPID ", '"ca-app-pub-2144172051563531~2438648667"'
            buildConfigField "String", "AD_GOOGLE_BANNER", '"ca-app-pub-2144172051563531/5930460677"'
            buildConfigField "String", "AD_GOOGLE_INSERT", '"ca-app-pub-2144172051563531/6240068977"'
            buildConfigField "String", "AD_GOOGLE_NATIVE", '"ca-app-pub-2144172051563531/1065857240"'

            applicationId 'cn.yuntk.novel.reader'
            manifestPlaceholders = [app_name_channel    : "reader收音机"]
        }
        greendao {
            schemaVersion 1
//            daoPackage "${defaultConfig.applicationId}.ibook.dbdao.local"
            daoPackage "cn.yuntk.radio.ibook.dbdao.local"
            targetGenDir 'src/main/java'
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
        jumboMode = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

def buildTime() {
    return new Date().format("yyyy-MM-dd HH:mm", TimeZone.getTimeZone(TimeZone.getDefault().getID()))
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    // Lifecycles, LiveData and ViewModel
    implementation 'android.arch.lifecycle:runtime:1.1.1'
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    kapt "android.arch.lifecycle:compiler:1.1.1"

    //retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.0'
    implementation 'com.google.code.gson:gson:2.8.5'

    //rx android
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.8'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-components:2.2.1'

    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.22.5'
    implementation files('libs/commons-io-2.5.jar')

    //eventbus
    implementation 'org.greenrobot:eventbus:3.1.1'

    //vitamio音频播放库
    implementation project(path: ':vitamio')

    //room
    implementation 'android.arch.persistence.room:runtime:1.1.1'
    kapt 'android.arch.persistence.room:compiler:1.1.1'

    //    annotationProcessor 'android.arch.persistence.room:compiler:1.1.1'

    // RxJava support for Room
    implementation 'android.arch.persistence.room:rxjava2:1.1.1'

    // 阿里反馈
    implementation 'com.aliyun.ams:alicloud-android-feedback:3.1.1@aar'
    implementation 'com.aliyun.ams:alicloud-android-utdid:1.1.5.3'
    implementation 'com.aliyun.ams:alicloud-android-ut:5.1.0'
    implementation 'com.aliyun.ams:alicloud-android-utils:1.0.3'

    //阿里反馈需要
    implementation 'com.android.support:support-v4:27.1.1'

    //分包需要

    //    implementation 'com.android.support:multidex:1.0.3'

    //申请权限
    implementation 'com.yanzhenjie:permission:1.1.0'

    //umeng统计
    implementation 'com.umeng.sdk:common:1.5.3'
    implementation 'com.umeng.sdk:analytics:7.5.1'

    //bugly
    implementation 'com.tencent.bugly:crashreport_upgrade:1.3.1'
    implementation 'com.tencent.bugly:nativecrashreport:3.3.1'

    //    听书依赖
    implementation 'com.jakewharton:butterknife:8.8.1'
    kapt 'com.jakewharton:butterknife-compiler:8.8.1'
    implementation 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.4-7'

    //    TabHost效果
    implementation 'com.shizhefei:ViewPagerIndicator:1.1.7'

    //    依赖注入
    implementation 'com.google.dagger:dagger:2.17'
    kapt 'com.google.dagger:dagger-compiler:2.17'
    implementation 'com.android.support:recyclerview-v7:26.1.0'
    implementation 'com.trello.rxlifecycle2:rxlifecycle:2.1.0'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-components:2.1.0'
    implementation 'com.github.bumptech.glide:glide:3.7.0'
    implementation 'org.greenrobot:greendao:3.2.2'

    //Google AD_SDK
    implementation 'com.google.android.gms:play-services-ads:15.0.1'
    implementation files('libs/GDTUnionSDK.4.18.570.min.jar')

    //walle多渠道打包 配置步骤三
    implementation 'com.meituan.android.walle:library:1.1.6'
}
repositories {
    mavenCentral()
}
kotlin {
    experimental {
        coroutines "enable"
    }
}
//walle多渠道打包 配置步骤四 项目跟目录下必须有文件:channel ,文件内写渠道名称
walle {
    //指定渠道包的输出路径
    apkOutputFolder = new File("${project.buildDir}/outputs/channels")
    //定制渠道包的APK的文件名称 例如app-xiaomi.apk
    apkFileNameFormat = '{app_name_channel}-${channel}.apk'
    //渠道配置文件
    channelFile = new File("${project.getProjectDir()}/channel")
}
