apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "cn.yuntk.radio"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode VERSION_CODE as int
        versionName VERSION_NAME
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        //增加对Vector兼容性的支持
        vectorDrawables.useSupportLibrary = true
        //渠道统一维度
        flavorDimensions "versionCode"
        //生成buildTime字段
        resValue("string", "build_time", buildTime())
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    signingConfigs {
        release {
            storeFile file(KEY_STORE)
            storePassword KEY_STORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_ALIAS_PASSWORD

            v1SigningEnabled true
            v2SigningEnabled true
        }

        debug {
//            storeFile file(KEY_STORE)
//            storePassword KEY_STORE_PASSWORD
//            keyAlias KEY_ALIAS
//            keyPassword KEY_ALIAS_PASSWORD

            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    productFlavors {
        _yuntk {}
        _baidu {}
        _360 {}
        _xiaomi {}
        _yingyongbao {}
        _oppo {}
        _huawei {}
        _lenovo {}
        _ziyong {}
        _vivo {}
        _meizu {}
        _anzhi {}
        productFlavors.all {
            flavor -> flavor.manifestPlaceholders = [RADIO_CHANNEL_VALUE: name]
        }
    }
}
def buildTime() {
    return new Date().format("yyyy-MM-dd HH:mm", TimeZone.getTimeZone(TimeZone.getDefault().getID()))
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    // Lifecycles, LiveData and ViewModel
    implementation 'android.arch.lifecycle:runtime:1.1.1'
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    annotationProcessor "android.arch.lifecycle:compiler:1.1.1"
    //retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.0'
    implementation 'com.google.code.gson:gson:2.8.5'
    //rx android
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.8'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-components:2.2.1'
    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.22.5'
    //databinding
    kapt 'com.android.databinding:compiler:3.1.3'
    //hermes-eventbus
    implementation files('libs/commons-io-2.5.jar')
    implementation 'org.greenrobot:eventbus:3.1.1'
    //vitamio音频播放库
    implementation project(path: ':vitamio')
    //room
    implementation 'android.arch.persistence.room:runtime:1.1.1'
    kapt 'android.arch.persistence.room:compiler:1.1.1'
    //    annotationProcessor 'android.arch.persistence.room:compiler:1.1.1'
    // RxJava support for Room
    implementation 'android.arch.persistence.room:rxjava2:1.1.1'
    // 阿里反馈
    implementation 'com.aliyun.ams:alicloud-android-feedback:3.1.1@aar'
    implementation 'com.aliyun.ams:alicloud-android-utdid:1.1.5.3'
    implementation 'com.aliyun.ams:alicloud-android-ut:5.1.0'
    implementation 'com.aliyun.ams:alicloud-android-utils:1.0.3'
    //阿里反馈需要
    implementation 'com.android.support:support-v4:27.1.1'
    //分包
    implementation 'com.android.support:multidex:1.0.3'

}
repositories {
    mavenCentral()
}
kotlin {
    experimental {
        coroutines "enable"
    }
}


//分包
//afterEvaluate {
//    tasks.matching {
//        it.name.startsWith('dex')
//    }.each { dx ->
//        def listFile = project.rootDir.absolutePath+'/app/maindexlist.txt'
//        if (dx.additionalParameters == null) {
//            dx.additionalParameters = []
//        }
//        //表示当方法数越界时则生成多个dex文件（我的没有越界，貌似也生成了两个）
//        dx.additionalParameters += '--multi-dex'
//        //这个指定了listFile中的类（即maindexlist.txt中的类）会打包到主dex中，不过注意下一条。
//        dx.additionalParameters += '--collection_delete-dex-list=' +listFile
//        //表明只有-collection_delete-dex-list所指定的类（在我的配置中，就是app目录下的maindexlist.txt中包含的类）才能打包到主dex中，如果没有这个选项，上个选项就会失效
//        dx.additionalParameters += '--minimal-collection_delete-dex'
//    }
//}
//
//tasks.whenTaskAdded { task ->
//    if (task.name.contains('AndroidTest') || task.name.contains('Test')) {
//        task.enabled = false
//    }
//}